{"version":3,"file":"static/js/830.b965f481.chunk.js","mappings":"8MAGe,SAASA,IACpB,OACI,SAAC,KAAc,CACXC,SAAS,YACTC,UAAW,KAEXC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAkB,EAClBC,WAAS,EACTC,cAAc,EACdC,MAAM,SAGlB,C,mJCfaC,EAAWC,EAAAA,EAAAA,KAAW,kQAYtBC,EAAYD,EAAAA,EAAAA,EAAQ,yIAQpBE,GAAQF,EAAAA,EAAAA,GAAOG,EAAAA,EAAPH,CAAiB,2CAIzBI,EAAqBJ,EAAAA,EAAAA,IAAU,0F,wCCd7B,SAASK,IACpB,OAAoCC,EAAAA,EAAAA,UAAS,IAAG,eAAzCC,EAAU,KAAEC,EAAa,KAChC,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCG,EAAQ,KAAEC,EAAW,KACtBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAoB,SAAAC,GACtB,GAAwB,UAApBA,EAAIC,OAAOC,KAGX,OAFAR,EAAcM,EAAIC,OAAOE,YACzBC,aAAaC,QAAQ,WAAYL,EAAIC,OAAOE,OAGxB,aAApBH,EAAIC,OAAOC,MACXN,EAAYI,EAAIC,OAAOE,MAG/B,GAEAG,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACNC,EAAgD,QAAnC,EAAGH,aAAaI,QAAQ,mBAAW,QAAI,GAC1Dd,EAAca,EAClB,GAAG,IAEH,IAkBME,EAAkB,WACpBf,EAAc,IACdE,EAAY,IACZQ,aAAaM,WAAW,WAC5B,EAEA,OACI,UAACzB,EAAQ,CAAC0B,aAAa,MAAMC,SAzBZ,SAAAZ,GACjBA,EAAIa,iBACJ,IAAMC,EAAOd,EAAIe,cACXC,EAAQF,EAAKG,SAASD,MAAMb,MAAMe,cAClCC,EAAWL,EAAKG,SAASE,SAAShB,MACxCN,GAASuB,EAAAA,EAAAA,IAAW,CAAEJ,MAAAA,EAAOG,SAAAA,KACxBE,SACAC,MAAK,kBAAMb,GAAiB,IAC5Bc,OAAM,kBACHC,EAAAA,GAAAA,MACI,iEACH,GAEb,EAYwD,WAChD,SAACrC,EAAS,UAAC,oCAEX,SAACC,EAAK,CACFqC,KAAK,QACLC,MAAM,SACNxB,KAAK,QACLyB,KAAK,OACLC,YAAY,SACZzB,MAAOV,EACPoC,SAAU9B,EACV+B,WAAY,CACRC,QAAS,wCACTC,MAAO,yFAIf,SAAC5C,EAAK,CACFqC,KAAK,QACLC,MAAM,WACNC,KAAK,WACLzB,KAAK,WACL0B,YAAY,WACZjB,aAAa,MACbR,MAAOR,EACPkC,SAAU9B,EACV+B,WAAY,CACRC,QAAS,QACTC,MAAO,4CAGf,UAAC1C,EAAkB,YACf,SAAC2C,EAAA,EAAM,CACHN,KAAK,SACLO,QAAQ,WACRT,KAAK,QACLU,UA9CcC,QAAQ3C,GAAcE,GA8CP,SAChC,WAGD,SAACsC,EAAA,EAAM,CACHC,QAAQ,WACRT,KAAK,QACLY,MAAM,YACNC,QAAS7B,EACT0B,UAtDaC,QAAQ3C,GAAcE,GAsDP,SAC/B,cAIL,SAACpB,EAAA,EAAiB,MAG9B,C,kBC9GagE,EAAOrD,EAAAA,EAAAA,KAAW,0JAQlBsD,GAAqBtD,EAAAA,EAAAA,GAAOuD,EAAAA,EAAPvD,CAAiB,0ECRpC,SAASwD,IACpB,OACI,SAACH,EAAI,WACD,SAACC,EAAkB,WACf,SAACjD,EAAS,OAI1B,C","sources":["components/AppToastContainer/AppToastContainer.jsx","components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function AppToastContainer() {\n    return (\n        <ToastContainer\n            position=\"top-right\"\n            autoClose={4500}\n            // hideProgressBar\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss={false}\n            draggable\n            pauseOnHover={false}\n            theme=\"light\"\n        />\n    );\n}\n","import styled from '@emotion/styled';\nimport { TextField } from '@mui/material';\n\nexport const FormBody = styled.form`\n    padding: 30px 20px;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    row-gap: 15px;\n    border-radius: 10px;\n    background-color: #fff;\n\n    box-shadow: 0 0 0 1px rgba(3, 102, 214, 0.3) inset;\n`;\n\nexport const FormTitle = styled.p`\n    padding: 0 0 25px 0;\n    font-size: 20px;\n    font-weight: 600;\n    line-height: 1;\n    color: #1976d2;\n`;\n\nexport const Input = styled(TextField)`\n    width: 400px;\n`;\n\nexport const FormButtonsWrapper = styled.div`\n    margin-top: 20px;\n    display: flex;\n    column-gap: 15px;\n`;\n","import AppToastContainer from '../../components/AppToastContainer';\nimport { toast } from 'react-toastify';\nimport { Button } from '@mui/material';\nimport {\n    FormBody,\n    Input,\n    FormTitle,\n    FormButtonsWrapper,\n} from './LoginForm.styled';\nimport { loginThunk } from '../../redux/operations-auth';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nexport default function LoginForm() {\n    const [emailValue, setEmailValue] = useState('');\n    const [pswValue, setPswValue] = useState('');\n    const dispatch = useDispatch();\n\n    const handleInputChange = evt => {\n        if (evt.target.name === 'email') {\n            setEmailValue(evt.target.value);\n            localStorage.setItem('logEmail', evt.target.value);\n            return;\n        }\n        if (evt.target.name === 'password') {\n            setPswValue(evt.target.value);\n            return;\n        }\n    };\n\n    useEffect(() => {\n        const restoredEmail = localStorage.getItem('logEmail') ?? '';\n        setEmailValue(restoredEmail);\n    }, []);\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        const form = evt.currentTarget;\n        const email = form.elements.email.value.toLowerCase();\n        const password = form.elements.password.value;\n        dispatch(loginThunk({ email, password }))\n            .unwrap()\n            .then(() => resetFormFields())\n            .catch(() =>\n                toast.error(\n                    'Check if your e-mail and password are correct and try again...'\n                )\n            );\n    };\n\n    const isReadyToSubmit = () => Boolean(emailValue && pswValue);\n    const isReadyToReset = () => Boolean(emailValue || pswValue);\n\n    const resetFormFields = () => {\n        setEmailValue('');\n        setPswValue('');\n        localStorage.removeItem('logEmail');\n    };\n\n    return (\n        <FormBody autoComplete=\"off\" onSubmit={handleSubmit}>\n            <FormTitle>Enter your e-mail and password</FormTitle>\n\n            <Input\n                size=\"small\"\n                label=\"e-mail\"\n                name=\"email\"\n                type=\"text\"\n                placeholder=\"e-mail\"\n                value={emailValue}\n                onChange={handleInputChange}\n                inputProps={{\n                    pattern: '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$',\n                    title: 'the e-mail must contain the characters \"@\" ,\".\" and 2 or more characters after \".\"',\n                }}\n            />\n\n            <Input\n                size=\"small\"\n                label=\"password\"\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"password\"\n                autoComplete=\"off\"\n                value={pswValue}\n                onChange={handleInputChange}\n                inputProps={{\n                    pattern: '.{7,}',\n                    title: 'password must be 7 characters or more',\n                }}\n            />\n            <FormButtonsWrapper>\n                <Button\n                    type=\"submit\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={!isReadyToSubmit()}\n                >\n                    Login\n                </Button>\n                <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    color=\"secondary\"\n                    onClick={resetFormFields}\n                    disabled={!isReadyToReset()}\n                >\n                    Reset\n                </Button>\n            </FormButtonsWrapper>\n            <AppToastContainer />\n        </FormBody>\n    );\n}\n","import styled from '@emotion/styled';\nimport Container from '../../components/common/Container/';\n\nexport const Main = styled.main`\n    width: 100%;\n    overflow: hidden;\n    height: calc(100vh - 69px);\n    padding-top: 70px;\n    background-color: #e7ebf0;\n`;\n\nexport const LoginPageContainer = styled(Container)`\n    display: flex;\n    justify-content: center;\n`;\n","import LoginForm from '../../components/LoginForm/';\nimport { Main, LoginPageContainer } from './LoginPage.styled';\n\nexport default function LoginPage() {\n    return (\n        <Main>\n            <LoginPageContainer>\n                <LoginForm />\n            </LoginPageContainer>\n        </Main>\n    );\n}\n"],"names":["AppToastContainer","position","autoClose","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","FormBody","styled","FormTitle","Input","TextField","FormButtonsWrapper","LoginForm","useState","emailValue","setEmailValue","pswValue","setPswValue","dispatch","useDispatch","handleInputChange","evt","target","name","value","localStorage","setItem","useEffect","restoredEmail","getItem","resetFormFields","removeItem","autoComplete","onSubmit","preventDefault","form","currentTarget","email","elements","toLowerCase","password","loginThunk","unwrap","then","catch","toast","size","label","type","placeholder","onChange","inputProps","pattern","title","Button","variant","disabled","Boolean","color","onClick","Main","LoginPageContainer","Container","LoginPage"],"sourceRoot":""}